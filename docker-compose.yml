networks:
  microservice-net:

volumes:
  postgres-data:
  kafka-data:

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres_multi_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: orders_db,logistics_db,courier_db,tracking_db
    volumes:
      - ./init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
      - postgres-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - microservice-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - microservice-net

  kafka:
    image: bitnami/kafka:3.9.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=INTERNAL://kafka:9090,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9090,EXTERNAL://127.0.0.1:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_LOG_RETENTION_HOURS=8
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - microservice-net
    depends_on:
      - zookeeper

  orders:
    profiles: ["apps"]
    build:
      context: ./orders
      dockerfile: Dockerfile
    image: local/orders:latest
    container_name: orders
    ports:
      - "8081:8080"
    networks:
      - microservice-net
    environment:
      DATASOURCE_URL: jdbc:postgresql://postgres:5432/orders_db
      DATASOURCE_USERNAME: orders_db
      DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  logistics:
    profiles: ["apps"]
    build:
      context: ./logistics
      dockerfile: Dockerfile
    image: local/logistics:latest
    container_name: logistics
    ports:
      - "8082:8080"
    networks:
      - microservice-net
    environment:
      DATASOURCE_URL: jdbc:postgresql://postgres:5432/logistics_db
      DATASOURCE_USERNAME: logistics_db
      DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  courier:
    profiles: ["apps"]
    build:
      context: ./courier
      dockerfile: Dockerfile
    image: local/courier:latest
    container_name: courier
    ports:
      - "8083:8080"
    networks:
      - microservice-net
    environment:
      DATASOURCE_URL: jdbc:postgresql://postgres:5432/courier_db
      DATASOURCE_USERNAME: courier_db
      DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  tracking:
    profiles: ["apps"]
    build:
      context: ./tracking
      dockerfile: Dockerfile
    image: local/tracking:latest
    container_name: tracking
    ports:
      - "8084:8080"
    networks:
      - microservice-net
    environment:
      DATASOURCE_URL: jdbc:postgresql://postgres:5432/tracking_db
      DATASOURCE_USERNAME: tracking_db
      DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
